TODO Monday:
- start implementing
 - `Source`
 - For this we need some more classes, like FileType:
  - to know how to handle the data format that the source specifies
 - the source should only specify **WHERE** data is, and then be
   configured on **HOW** it looks/format.? OR - is this actually
   what I want? no maybe not
 - `Target`
 - and parsing as Arrow/Columnar/Parquet (IR) when necessary

What if it is just easier to do like

```python
class PostgresSource(Source):

    def __init__(self, url, db, schema, table, username, password):
        pass


class JsonFile(Source):
    def __init__(self, path):
        # handle parsing of path, it could be
        # s3://bucket_name/folder/file.json
        # or it could be
        # my/path/to/file.json
        # so we need a way to determine where we should look
        # for the json file - but this is easier than having
        # weird configs and stuff...
        pass
```

-----------------------------------------------------------------------

TODO tuesday:
What would I like done today?
- Have working example Source-[Transform(s)]->Target.
 - what do I need to do to get here?
  - Implement Targets :)
   - lets start with JsonTarget, CsvTarget, ParquetTarget
 - implement transforms
   - start with... col_as_dtype? something like that? drop_nulls?
   - lets start with drop_nulls (or as a class? `DropNulls`)

Also fix pyright import issues... DONE

DONE: working Pipeline example :) YAY

-----------------------------------------------------------------------
